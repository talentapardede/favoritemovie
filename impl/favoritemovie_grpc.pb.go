// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_favoritemovie

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FavoriteMovieSearcherClient is the client API for FavoriteMovieSearcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FavoriteMovieSearcherClient interface {
	SearchMovie(ctx context.Context, in *MovieSpec, opts ...grpc.CallOption) (FavoriteMovieSearcher_SearchMovieClient, error)
	GetMovie(ctx context.Context, in *GetMovieSpec, opts ...grpc.CallOption) (*MovieDetail, error)
}

type favoriteMovieSearcherClient struct {
	cc grpc.ClientConnInterface
}

func NewFavoriteMovieSearcherClient(cc grpc.ClientConnInterface) FavoriteMovieSearcherClient {
	return &favoriteMovieSearcherClient{cc}
}

func (c *favoriteMovieSearcherClient) SearchMovie(ctx context.Context, in *MovieSpec, opts ...grpc.CallOption) (FavoriteMovieSearcher_SearchMovieClient, error) {
	stream, err := c.cc.NewStream(ctx, &FavoriteMovieSearcher_ServiceDesc.Streams[0], "/favoritemovie.FavoriteMovieSearcher/SearchMovie", opts...)
	if err != nil {
		return nil, err
	}
	x := &favoriteMovieSearcherSearchMovieClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FavoriteMovieSearcher_SearchMovieClient interface {
	Recv() (*MovieDetail, error)
	grpc.ClientStream
}

type favoriteMovieSearcherSearchMovieClient struct {
	grpc.ClientStream
}

func (x *favoriteMovieSearcherSearchMovieClient) Recv() (*MovieDetail, error) {
	m := new(MovieDetail)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *favoriteMovieSearcherClient) GetMovie(ctx context.Context, in *GetMovieSpec, opts ...grpc.CallOption) (*MovieDetail, error) {
	out := new(MovieDetail)
	err := c.cc.Invoke(ctx, "/favoritemovie.FavoriteMovieSearcher/GetMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FavoriteMovieSearcherServer is the server API for FavoriteMovieSearcher service.
// All implementations must embed UnimplementedFavoriteMovieSearcherServer
// for forward compatibility
type FavoriteMovieSearcherServer interface {
	SearchMovie(*MovieSpec, FavoriteMovieSearcher_SearchMovieServer) error
	GetMovie(context.Context, *GetMovieSpec) (*MovieDetail, error)
	mustEmbedUnimplementedFavoriteMovieSearcherServer()
}

// UnimplementedFavoriteMovieSearcherServer must be embedded to have forward compatible implementations.
type UnimplementedFavoriteMovieSearcherServer struct {
}

func (UnimplementedFavoriteMovieSearcherServer) SearchMovie(*MovieSpec, FavoriteMovieSearcher_SearchMovieServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchMovie not implemented")
}
func (UnimplementedFavoriteMovieSearcherServer) GetMovie(context.Context, *GetMovieSpec) (*MovieDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovie not implemented")
}
func (UnimplementedFavoriteMovieSearcherServer) mustEmbedUnimplementedFavoriteMovieSearcherServer() {}

// UnsafeFavoriteMovieSearcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FavoriteMovieSearcherServer will
// result in compilation errors.
type UnsafeFavoriteMovieSearcherServer interface {
	mustEmbedUnimplementedFavoriteMovieSearcherServer()
}

func RegisterFavoriteMovieSearcherServer(s grpc.ServiceRegistrar, srv FavoriteMovieSearcherServer) {
	s.RegisterService(&FavoriteMovieSearcher_ServiceDesc, srv)
}

func _FavoriteMovieSearcher_SearchMovie_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MovieSpec)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FavoriteMovieSearcherServer).SearchMovie(m, &favoriteMovieSearcherSearchMovieServer{stream})
}

type FavoriteMovieSearcher_SearchMovieServer interface {
	Send(*MovieDetail) error
	grpc.ServerStream
}

type favoriteMovieSearcherSearchMovieServer struct {
	grpc.ServerStream
}

func (x *favoriteMovieSearcherSearchMovieServer) Send(m *MovieDetail) error {
	return x.ServerStream.SendMsg(m)
}

func _FavoriteMovieSearcher_GetMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovieSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteMovieSearcherServer).GetMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/favoritemovie.FavoriteMovieSearcher/GetMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteMovieSearcherServer).GetMovie(ctx, req.(*GetMovieSpec))
	}
	return interceptor(ctx, in, info, handler)
}

// FavoriteMovieSearcher_ServiceDesc is the grpc.ServiceDesc for FavoriteMovieSearcher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FavoriteMovieSearcher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "favoritemovie.FavoriteMovieSearcher",
	HandlerType: (*FavoriteMovieSearcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMovie",
			Handler:    _FavoriteMovieSearcher_GetMovie_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchMovie",
			Handler:       _FavoriteMovieSearcher_SearchMovie_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "favoritemovie.proto",
}
